package flentas.senp.updatelan.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestController;

import flentas.senp.updatelan.dto.ErrorResponseDto;
import flentas.senp.updatelan.dto.OutputResponseDto;
import flentas.senp.updatelan.exception.CustomException;
import flentas.senp.updatelan.exception.ValidationException;

//import flentas.gnb.UserContext;
//import flentas.gnb.dto.ErrorResponseDto;
//import flentas.gnb.dto.OutputResponseDto;
//import flentas.gnb.exception.CustomException;
//import flentas.gnb.exception.ValidationException;

/* @author Smita  <smita.fapale@flentas.com><
 *   This is CustomExceptionHandler class will handle all the custom exception generated by the application
 *   member function get and set values of fields
 **/
@RestController
@ControllerAdvice
@Order(Ordered.HIGHEST_PRECEDENCE)
public class CustomExceptionHandler {

	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@ExceptionHandler(value = ValidationException.class)
	public ResponseEntity<OutputResponseDto> handleValidationException1(ValidationException e) {
		logger.info("custom exception");
		OutputResponseDto outputResponseDto = new OutputResponseDto();
		outputResponseDto.setStatus(false);
		outputResponseDto.setData(null);
		outputResponseDto.setStatusCode(e.getStatuscode());
		outputResponseDto.setMessage(e.getMessage());
		outputResponseDto.setTraceId(e.getTraceId());
		logger.error("Error in validation : {}", e);

		return new ResponseEntity<OutputResponseDto>(outputResponseDto, e.getHttpstatus());
	}

	@ExceptionHandler(value = CustomException.class)
	public ResponseEntity<ErrorResponseDto> handleCustomException(CustomException e) {

		ErrorResponseDto errorResponseDto = new ErrorResponseDto();
		errorResponseDto.setStatus(false);
		errorResponseDto.setStatusCode(e.getStatuscode());
		errorResponseDto.setError(e.getMessage());
		errorResponseDto.setMessage(e.getMessage());
		errorResponseDto.setErrorType(e.getType());
		errorResponseDto.setTraceId(e.getTraceId());
		logger.error("Error in custom : {}" + e);

		return new ResponseEntity<ErrorResponseDto>(errorResponseDto, e.getHttpStatus());
	}

}